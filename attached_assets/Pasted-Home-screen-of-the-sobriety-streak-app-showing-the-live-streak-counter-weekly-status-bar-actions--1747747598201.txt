Home screen of the sobriety streak app, showing the live streak counter, weekly status bar, actions, and Panic Button.

On the Home screen, the user sees their current sobriety streak and related controls:
	•	Live Streak Counter: At the center, display the text “You’ve been porn-free for:” followed by a dynamic time counter. The counter logic is: if the streak is at least 1 full day, show the total days in large text (e.g. “9 days”), and directly underneath show the remaining hours, minutes, and seconds (e.g. “19hr 21m 43s”) counting continuously. If the streak is less than 1 day, show hours and minutes in the large text (e.g. “1hr 18m”) and show seconds ticking below (e.g. “33s”). This counter must update in real time every second to give a live feel. We can implement this with a Timer.periodic callback that calls setState every second to update a DateTime.now() difference from the last relapse timestamp ￼. Make sure to cancel the timer in dispose() to avoid memory leaks. The text style should be large and bold for the main counter, and slightly smaller for the seconds or secondary text. The exact wording and format (“X days”, “Yhr Zm”, etc.) should match the app screenshots.
	•	Weekly Progress Bar (Mon–Sun): At the top of the home panel, display a horizontal row for the days of the week (M, T, W, T, F, S, S). Above each day letter, show a status symbol for that day’s check-in: a purple checkmark (✓) if the user did not relapse that day, a purple cross (✕) if the user relapsed, or a dash (–) if the day is in the future or no data. This provides a quick week-at-a-glance streak status. For example, in the screenshot the user’s week shows checkmarks on certain days and X’s on relapse days. To implement this, when the app loads or when a daily check-in is logged, update a list of 7 status values corresponding to the last 7 days (or the current week). Each day’s status icon can be a small CircleAvatar or Container with a colored background:
	•	Use a filled purple circle with a ✓ icon for success days.
	•	Use a purple circle with an ✕ icon for relapse days.
	•	Use a gray dash or hollow circle for days not yet reached.
Ensure to label them with the weekday initials underneath (M, T, W, etc.). We will retrieve the user’s check-in data (relapse or not) from the database and update this bar daily.
	•	Brain Rewiring Progress Bar: Under the counter, include a labeled progress bar showing “Brain Rewiring: X%”. This is a horizontal progress indicator from 0% to 100%, representing the user’s progress toward full “brain rewiring.” QUITTR uses 90 days (and beyond) as a benchmark for recovery, so we will treat 90 days as 100% (or possibly extend to 365 for full recovery) as per the app logic. For example, at 9 days streak the bar might show ~10% (the screenshot shows 11% for 9 days) – this suggests that as the streak grows, the percentage increases proportionally ￼. Implementation: We calculate percent = (currentStreakDays / 90) * 100 (capping at 100%). Use Flutter’s LinearProgressIndicator or a custom Container with BoxDecoration to render the progress bar. Update this whenever the streak changes.
	•	Quick Action Buttons: Below the counter, provide a row of four circular icon buttons: Pledge, Meditate, Reset, and More…:
	•	Pledge: Represented by a hand icon (✋). When tapped, this opens the Pledge modal (detailed in the Pledge section) where the user commits to staying clean for the next 24 hours.
	•	Meditate: Represented by a lotus or person-in-meditation icon 🧘. This will navigate to a Meditation screen or feature (for example, it could play a guided meditation or breathing exercise to help with urges). For now, we can stub this to perhaps play a calming animation or sound. (If assets for meditation are available, integrate them; otherwise a simple calming timer or breathing exercise widget can be implemented.)
	•	Reset: Represented by a reset/refresh icon (↻). This provides a manual way for the user to reset their streak (in case they relapsed but didn’t do the check-in flow). On tap, confirm the action (“Are you sure you want to reset your streak?”). If confirmed, log a relapse: set current streak to 0, update last relapse timestamp to now, and update all relevant UI (weekly bar, progress bar, achievements). Essentially, this does the same thing as reporting a relapse in the daily check-in, but accessible any time.
	•	More: Represented by a three-dot icon ⋯. Tapping this can open an overflow menu or modal with additional features not directly on the main screen. For example, QUITTR has community forums, lessons (“Learn”), or a personalized plan. We can use this menu to navigate to those sections if they are in scope, or to a Settings page. (The exact content of “More” can be adjusted, but include it to match UI even if just a placeholder menu.)
	•	Open Analytics (Link): Just above the Panic Button (see below), there is a text link “Open Analytics”. This likely is a shortcut to the Analytics page. We will implement this as a simple text button (perhaps styled in a subtle way) that navigates to the Analytics screen (detailed later). It should be positioned as in the screenshot (left-aligned above the Panic Button). Given we also have a bottom nav icon for Analytics, this is an extra entry point, but we include it for fidelity to the original app.
	•	Panic Button: At the bottom of the home screen, display a large red button labeled “🔴 Panic Button”. This is a critical feature: when the user feels a strong urge to relapse, they can hit the Panic Button for immediate intervention. The button is styled with a red border and text (as shown in screenshots) to stand out. Implement the Panic Button’s behavior as follows: On tap, switch to an emergency overlay – the screen should flash red and white text on a black background with urgent messages, and the device should vibrate intensely ￼. For example, we can create a full-screen Dialog or new page that overrides system UI (e.g., hide status bar) and display messages like “Stop! Don’t give in!”, “Remember why you started!”, “Urges are temporary, keep strong!” in rapid succession. Use an animation controller or Timer to flash these messages (e.g., toggle their visibility or color every 300ms). Also use the Vibration API or HapticFeedback.heavyImpact() in a loop to simulate an alarm. The Ed Latimore review describes that “When pressed, the screen transforms. Red and white text flashes over a black background. Urgent messages fire across the screen, complete with vibrations…” ￼ – we will recreate that experience. Provide a way to exit panic mode (perhaps a hidden “X” button or tapping the screen for 3 seconds) so the user can return to the normal UI once the urge has passed. The Panic Button feature requires careful testing on both Android and iOS to ensure the flashing and vibration are effective and not blocked by OS.

The Home screen background will be a dark purple/indigo gradient with subtle starry speckles (per the screenshots). We can achieve this by setting a BoxDecoration with a linear gradient (e.g., from #09002E to #180449) and adding a faint star pattern overlay (either via a transparent PNG of stars or by programmatically painting small dots). All home screen text is white or light gray for contrast. The overall layout is a Column centered, possibly within a SingleChildScrollView if needed (but the content should generally fit on one screen). Use padding to space elements like the streak text and buttons.

Daily Check-In Flow

Each day, the app will prompt the user to check in and report whether they stayed clean or relapsed, and how they feel. This flow consists of three steps presented in sequence. It can be initiated automatically via a daily reminder notification (see Pledge section) or manually via a prompt on the home screen (for example, the “Open Analytics” text might change to “Daily Check-In” if due). We’ll implement it as a series of three Flutter screens or dialogs that appear one after another. After the final step, the result is recorded (streak continues or resets, mood logged, etc.). The UI and text for each step must match QUITTR exactly:
	1.	Step 1 – Relapse Question: Ask the user “Did you relapse today? Let the community know by checking in.” at the top of the screen. Right below, display a live community statistic: “<N> are still going strong”, where <N> is the number of users (worldwide) who have not relapsed today (i.e., who answered “No” so far). In the screenshot example, it shows “14,310 are still going strong” below the question. We will fetch this number from the backend – likely stored in a global daily stats document updated as users check in. (For implementation, we can use a Cloud Firestore document like stats/{date} that has a field numNoRelapse which increments whenever a user chooses “No”. Similarly, if needed, track numRelapses or derive it from total users minus no-relapse count.) Next, present two large buttons for the user’s response: a blue “No, still going strong 💪” button for “No, I did NOT relapse”, and a red “⚠️ Yes, I relapsed” button for “Yes, I did relapse.” These should be styled as big rounded rectangles spanning almost the full width (with the blue and red colors matching the app). The “No” button is the positive action (so we’ll style it in a reassuring blue and include the flexed bicep emoji 💪), whereas “Yes” has a warning icon and red background to indicate the setback. When either button is pressed:
	•	If “No, still going strong”: we record that the user did not relapse for today. This will keep their streak alive and increment it by one day (if this is the end-of-day check-in). We should update the weekly bar (mark this day with a ✓) and eventually increment their streak counter once the day fully passes. We also will update the global stat: increment the numNoRelapse count for today’s date (this is how others see the community count). Then proceed to Step 2 (mood selection).
	•	If “Yes, I relapsed”: we record a relapse for today. Immediately, we should reset the user’s streak counter to 0 (and possibly store the streak length they had before reset if we want to show “last streak” somewhere). Update the weekly bar for today with an ✕. Also consider decrementing the numNoRelapse stat or increment a numRelapse stat for completeness. After this, we still proceed to Step 2 (because the app likely still asks how you feel even if you relapsed – QUITTR emphasizes support regardless of outcome). However, we will later, at the end of the flow, trigger the streak reset logic (which we’ve done) and possibly lock any not-yet-achieved achievements again or such (details in Achievements section).
Implementation note: The check-in flow can be implemented with a PageView or three separate routes that we navigate through. Using a modal for each step that covers most of the screen (with a cancel/back option) can work. We should also disable skipping – user should answer to continue (but provide a “Back” arrow if they want to change an answer). The community count <N> will be retrieved from Firestore when the screen opens (listen to a doc for live updates, so it might increment in real-time as others check in).
	2.	Step 2 – Mood Selection: After the relapse question, the next screen asks “And how are you feeling?”. This is the mood check-in regardless of relapse status. The UI shows three large vertically stacked buttons, each with a colored background and an emoji in the center:
	•	A green button with a smiling 🙂 emoji for feeling good/happy.
	•	A yellow button with a neutral 😐 emoji for feeling okay/so-so.
	•	A red button with a downcast 😔 emoji for feeling upset/sad.
These buttons have no text labels, just the emoji centered, exactly as in the QUITTR UI. They span most of the width of the screen with some padding between them. The colors should be somewhat soft (not neon) to look pleasant on the dark background (use green = #4CAF50 or similar, yellow = #FFC107, red = #F44336 as a guideline for Material colors). When the user taps one of the emojis, record that mood. We will store it in today’s check-in record (e.g., in Firestore under the user’s daily log, mood: happy/neutral/sad). Also, update the global daily mood counts for community stats: e.g., increment countHappy, countNeutral, or countSad for today’s stats. Then proceed to the final step. (No “next” button is needed; tapping the mood directly advances.)
Note: If the user relapsed in Step 1, we still ask mood in Step 2 – feeling “sad” might be likely in that case, but they could still choose happy or neutral if they feel okay. All users go through mood selection once per day.
	3.	Step 3 – Community Encouragement: The final check-in step provides positive reinforcement and community perspective. At the top, show a headline motivational message. In the screenshot example it says: “QUITTR believes in you, never give up. 👑” – we will use that exact text. (We can randomize the message or pick from a set for variety, but for replication use the one given.) Below that, display community mood statistics for the day: three lines of text, each with an emoji and a count:
	•	🙂 XX,XXX others    (number of people who reported feeling happy today)
	•	😐 X,XXX others    (number who felt neutral)
	•	😔 XXX others      (number who felt sad)
These numbers come from the aggregated stats we updated in Step 2. For instance, “19,496 others” felt happy, “5,102 others” neutral, “402 others” sad as per the example. Display these with the emoji icon followed by the count and “others” in a bold white font. This shows the user they are not alone in their struggle – thousands of others have similar feelings (whether positive or negative). Under these stats, include a line of encouragement text. The example shows: “This is hard but believe in yourself. You’re not alone.” – we will use that exact phrase for now. It reinforces that overcoming addiction is difficult but the user is part of a supportive community.
At the bottom of this screen, provide two action buttons:
	•	Reflect: A large blue button labeled “🔄 Reflect”. The icon on it appears to be a counter-clockwise arrow, likely indicating a journaling or reflection opportunity. If the user taps Reflect, we can navigate them to a journal screen or open a text input modal where they can write down thoughts about their day or how they overcame urges. (Implement a simple Journal screen where each day the user can save a short note – store it in Firestore under a notes field for that day’s entry. This feature is optional but adds value. If not implementing full journal, the Reflect button could simply prompt an alert saying “Take a moment to reflect on your day.”)
	•	Finish: A text button labeled “Finish” below the Reflect button. Tapping Finish will exit the check-in flow (pop back to home screen). If the user doesn’t want to write a reflection, they can just finish immediately. We should make sure that if they tap Reflect and complete a note, we then also let them finish or auto-finish after saving the note.
Finally, when finishing Step 3, ensure all side effects of the check-in are completed:
	•	If the user had pressed “Yes, I relapsed” in Step 1, the streak has been reset. We should prompt the user with a fresh start message on home (maybe the home counter will now show something like “0hr 0m” since streak is 0 – or we could consider showing “Just reset”).
	•	If “No” (no relapse), increment their streak. Likely we consider a “day” completed only when the daily check-in is done, so at midnight the streak counter moves from e.g. “9 days 23hr 59m” to “10 days”. The check-in essentially confirms the day’s success. We might handle the day increment either immediately on check-in (assuming end-of-day usage) or the next day. Simpler: increment streak days by 1 when user checks in “No relapse” (and set lastRelapseDate unchanged). If user had no relapse since lastRelapseDate, streak = current date - lastRelapseDate in days.
	•	Update any achievements if the new streak count hits a milestone (see Achievements section).
	•	These updates will automatically reflect on home screen UI due to state management or by re-fetching data.

The check-in flow screens should use the same background and styling as home (dark starry background, white text). Use a SafeArea to avoid notches covering content. Possibly disable swiping back (so that user goes through all steps).

Analytics Screen