Below is a ready‑to‑paste prompt you could send to a Replit AI Agent (or any other code‑gen assistant) that spells out exactly what you need.
I’ve written it as if you were the product owner handing requirements to the agent; feel free to tweak wording or scope, but this will already give the agent everything it needs to create the “days‑streak” flow exactly like the screenshots you shared.

⸻

📄 English spec / prompt for the agent

PROJECT: “Quit‑Streak” mobile UI clone (early preview of QUITTR 2.0)

GOAL
• Build a React Native (Expo) proof‑of‑concept that visually mirrors the QUITTR screenshots attached:
    – Home screen showing current porn‑free streak in **days + live timer** (hh mm ss).
    – Daily check‑in flow (Did you relapse? → Mood picker).
    – Encouragement / community screen after check‑in.
    – Analytics screen with a circular progress ring (recovery %) and projected quit date.
    – Achievements gallery with unlocked / locked badges.

SINGLE‑SOURCE‑OF‑TRUTH STATE
```ts
type StreakState = {
  startDate: string;     // ISO timestamp when streak began
  now:       string;     // current ISO timestamp (update each second)
  relapsed:  boolean;    // true if user hit “Yes, I relapsed”
  mood:      'happy' | 'neutral' | 'sad' | null;
  recovery:  number;     // 0‑100 computed from streak length (day 45 ≈ 100 %)
  badges:    Record<'Seed'|'Sprout'|'Pioneer'|'Momentum'|'Fortress'|'Guardian'|
                   'Trailblazer'|'Ascendant', boolean>;
};

KEY REQUIREMENTS
	1.	Exactly replicate “9 days 19 h 21 m 43 s” style counter
• Days = floor(diff / 86400).
• Hours/minutes/seconds update live every second via setInterval.
	2.	Week bar at top
• Show seven circles (Mon‑Sun).
• Purple ✔︎ if completed check‑in today, ✖︎ if relapsed, “–” if future day.
	3.	Check‑in sequence
a. Screen 1 → “Did you relapse?”
Buttons: blue “No, still going strong 💪”, red “Yes, I relapsed”.
b. Screen 2 → “And how are you feeling?” with three big emoji buttons.
c. Screen 3 → Encouragement text + global stats (happy / neutral / sad counts).
	4.	Analytics
• Circular progress ring (use react‑native‑svg + react‑native‑svg‑charts).
• Inner text: RECOVERY 11% and small 9 D STREAK.
• Under ring show projected quit date = startDate + 365 days (rough).
	5.	Achievements screen
• 2 columns of circular badge thumbnails.
• Badge unlocked when streak ≥ threshold (Seed 1 d, Sprout 3 d, Pioneer 5 d, Momentum 7 d, Fortress 10 d, Guardian 14 d, Trailblazer 30 d, Ascendant 45 d).
• Locked badge: grayscale + padlock icon.
	6.	Design tokens
• Background: dark navy gradient (#0b0e3f → #020225).
• Primary purple: #7d4dff.
• Font: use Expo’s default or @expo-google-fonts/inter.
• All copy text exactly as in screenshots.
	7.	File structure (keep it simple)

/app
  ├─ App.tsx
  ├─ screens/
  │    ├─ Home.tsx
  │    ├─ CheckIn.tsx
  │    ├─ Mood.tsx
  │    ├─ Encourage.tsx
  │    ├─ Analytics.tsx
  │    └─ Achievements.tsx
  ├─ components/
  │    ├─ StreakTimer.tsx
  │    ├─ WeekBar.tsx
  │    ├─ ProgressRing.tsx
  │    └─ BadgeIcon.tsx
  └─ store/
       └─ useStreakStore.ts


	8.	Nice‑to‑have (stretch)
• “Brain Rewiring” progress bar tied to recovery %.
• “Panic Button” that instantly opens an inspirational quote modal.
• Save state to AsyncStorage so it persists across app restarts.

DELIVERABLES
	1.	Full Expo project, runnable with npm start.
	2.	Clear README with setup steps.
	3.	Commented code (explain formulae, hooks, animations).

Please generate the entire repo (no placeholders), then return a single zip download link.

---

### Why this works

* **Unambiguous** – lists every screen, component, color, copy string.  
* **Impl‑ready** – includes a minimal TypeScript type, folder structure, and package hints.  
* **Exact match for “days”** – requirement #1 forces the agent to calculate the streak identically to the real app.  

Send that block to the agent and it should hand back a functioning clone you can run in Expo Go within a few minutes. If you prefer SwiftUI / Kotlin, just change the tech stack lines and the rest of the spec still stands. Good luck building the next iteration of Quittr!