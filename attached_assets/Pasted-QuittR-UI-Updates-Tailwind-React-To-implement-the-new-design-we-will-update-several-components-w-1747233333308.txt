QuittR UI Updates (Tailwind/React)

To implement the new design, we will update several components with Tailwind CSS and React (Next.js). Each change is described below with example code snippets. We prioritize reusable components, smooth animations, mobile responsiveness, and accessibility (ARIA roles, focus states, etc.).

1. Animated Progress Ring & Milestone View

Animated Ring: Replace the static text timer with a clickable SVG ring. We can create a ProgressRing component that computes the elapsed time since the last relapse and updates every second using React state/hooks. For example:

import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';

function ProgressRing({ lastRelapseTime }) {
  const router = useRouter();
  const [secondsElapsed, setSecondsElapsed] = useState(0);

  // Update timer every second
  useEffect(() => {
    const interval = setInterval(() => {
      setSecondsElapsed(Math.floor((Date.now() - lastRelapseTime) / 1000));
    }, 1000);
    return () => clearInterval(interval);
  }, [lastRelapseTime]);

  const hours = Math.floor(secondsElapsed / 3600);
  const minutes = Math.floor((secondsElapsed % 3600) / 60);
  const seconds = secondsElapsed % 60;

  // Assume current stage target (e.g. 1 day for “Seed”) defines maxSeconds
  const currentStageMax = 24 * 3600; 
  const percentage = Math.min((secondsElapsed / currentStageMax) * 100, 100);

  // SVG circle calculations
  const size = 120, strokeWidth = 8;
  const radius = (size - strokeWidth) / 2;
  const circumference = 2 * Math.PI * radius;
  const dashOffset = circumference - (circumference * percentage) / 100;

  return (
    <button 
      onClick={() => router.push('/milestones')}
      className="relative flex items-center justify-center w-[120px] h-[120px]
                 rounded-full hover:scale-105 transition-transform duration-300"
      aria-label="View milestones"
    >
      <svg 
        className="w-full h-full -rotate-90" 
        viewBox={`0 0 ${size} ${size}`} 
        role="progressbar"
        aria-valuemin={0} 
        aria-valuemax={currentStageMax} 
        aria-valuenow={secondsElapsed}
      >
        {/* Background circle */}
        <circle
          className="text-gray-800"
          strokeWidth={strokeWidth}
          stroke="currentColor"
          fill="transparent"
          r={radius}
          cx={size/2}
          cy={size/2}
        />
        {/* Animated progress circle */}
        <circle
          className="text-indigo-400 transition-all ease-out duration-1000"
          strokeWidth={strokeWidth}
          strokeLinecap="round"
          stroke="currentColor"
          fill="transparent"
          r={radius}
          cx={size/2}
          cy={size/2}
          strokeDasharray={circumference}
          strokeDashoffset={dashOffset}
        />
      </svg>
      {/* Time text overlay */}
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <span className="text-xl font-bold text-white">
          {hours}h {minutes}m
        </span>
        <span className="text-sm text-gray-300">{seconds}s</span>
      </div>
    </button>
  );
}

	•	We use an SVG <circle> with stroke-dasharray and stroke-dashoffset to draw the ring. The offset is calculated as circumference - (circumference * percentage) / 100 ￼.
	•	Tailwind classes like transition-all ease-out duration-1000 smoothly animate the ring as percentage changes. We also use animate-spin or similar if a continuous spin/ripple effect is desired ￼.
	•	We wrap the SVG in a <button> (with appropriate aria-label) so the ring is clickable. On click, we use Next.js routing (e.g. router.push('/milestones')) to show the milestone view.
	•	Accessibility: we add role="progressbar" and set aria-valuemin, aria-valuemax, and aria-valuenow per ARIA guidelines ￼ ￼. This ensures screen readers announce the progress correctly.

Milestone View: In the Milestones page (Image 2), display stages (“Seed”, “Sprout”, etc.) with color-coded icons and progress bars. For example:

function Milestones() {
  const stages = [
    { name: 'Seed', days: 1, color: 'from-yellow-400 to-yellow-600' },
    { name: 'Sprout', days: 3, color: 'from-green-400 to-green-600' },
    { name: 'Pioneer', days: 7, color: 'from-blue-400 to-blue-600' },
    { name: 'Momentum', days: 10, color: 'from-purple-400 to-purple-600' },
    // ... more stages ...
  ];
  const daysClean = /* compute total days clean */;

  return (
    <div className="p-4 space-y-6">
      {stages.map(stage => {
        const progress = Math.min(daysClean, stage.days);
        const percent = (progress / stage.days) * 100;
        return (
          <div key={stage.name} className="flex flex-col items-center">
            {/* Colored circular icon (reuse ProgressRing logic or static icon) */}
            <div className={`w-16 h-16 rounded-full bg-gradient-to-br ${stage.color} mb-2`}></div>
            <h3 className="text-white font-semibold">{stage.name}</h3>
            <p className="text-sm text-gray-300 mb-1">
              Stay clean for {stage.days} days.
            </p>
            {/* Progress bar */}
            <div className="w-full bg-gray-700 rounded-full h-2">
              <div
                className={`h-full rounded-full bg-blue-500 transition-width duration-500`}
                style={{ width: `${percent}%` }}
              ></div>
            </div>
            <span className="text-xs text-gray-400">
              {progress}/{stage.days} days
            </span>
          </div>
        );
      })}
    </div>
  );
}

	•	Each stage shows an icon (here a colored circle using bg-gradient-to-br) and a horizontal bar indicating progress (<div className="bg-gray-700"><div className="bg-blue-500" style={{width: ...}}>). We add tailwind transitions (e.g. transition-width) for a smooth fill.
	•	Use responsive flex or grid to layout these cards (e.g. 2 columns on mobile) and ensure text contrast (white on dark background).
	•	On entering this view, you could add a fade/slide-in using Tailwind’s transition-opacity or enter animation utilities for a polished effect ￼.

2. Interactive To-Do Section

Add a “To-do” card on the homepage above the Recovery Tools. For example:

function TodoCard() {
  return (
    <div className="bg-gray-800 p-4 rounded-xl shadow-lg space-y-4">
      <h2 className="text-white text-lg font-bold">To-do</h2>
      <ul className="space-y-2">
        <li>
          <a 
            href="/community" 
            className="flex items-center px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md"
          >
            {/* You can use an icon library; here's a placeholder */}
            <svg className="w-5 h-5 mr-2" /* Telegram icon SVG */></svg>
            Join Community
          </a>
        </li>
        <li>
          <a 
            href="https://tiktok.com/@yourapp" 
            className="flex items-center px-3 py-2 bg-pink-500 hover:bg-pink-600 text-white rounded-md"
            target="_blank" rel="noopener noreferrer"
          >
            <svg className="w-5 h-5 mr-2" /* TikTok icon SVG */></svg>
            Follow on TikTok
          </a>
        </li>
      </ul>
    </div>
  );
}

	•	We use a card-like container (bg-gray-800 p-4 rounded-xl shadow) similar to the mockup. The title “To-do” is styled in white.
	•	Each button is an <a> (or Next.js <Link>) with utility classes. For example, class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded" ￼ provides a blue button style. We add an icon (e.g., a Telegram logo) and text, all inside the link.
	•	The “Join Community” button links to your community (e.g. a Telegram chat) and “Follow on TikTok” links to your app’s TikTok profile (opening in new tab). Ensure aria-label or screen-reader text if the link contains only an icon.
	•	The buttons use hover transitions (hover:bg-blue-700) for feedback. The layout (flex items-center) makes the icon and text line up horizontally.

3. Reorder Recovery Tool Icons

Finally, adjust the Recovery Tool section to have a 2×2 grid with the new order:

function RecoveryTools() {
  return (
    <div className="grid grid-cols-2 gap-4">
      <ToolCard icon={<LearnIcon />} label="Learn" onClick={...} />
      <ToolCard icon={<ChatIcon />} label="Chat" onClick={...} />
      <ToolCard icon={<MilestoneIcon />} label="Milestone" onClick={...} />
      <ToolCard icon={<ReasonsIcon />} label="Reasons" onClick={...} />
    </div>
  );
}

	•	We use grid grid-cols-2 gap-4 (two columns) to arrange the four tools. Tailwind makes this easy: e.g. <div className="grid grid-cols-2 gap-4"> creates two equal-width columns ￼.
	•	The order is: Top-left: Learn, Top-right: Chat, Bottom-left: Milestone, Bottom-right: Reasons, matching the requirement.
	•	Each ToolCard is a reusable component that displays an icon and label (styled e.g. with flex flex-col items-center p-4 bg-gray-700 rounded-lg). Ensure it’s fully clickable (e.g. wrap in a <button> or <a>).
	•	The grid is responsive by default; on larger screens you could add md:grid-cols-4 to make all icons appear in one row, if desired.

By reusing components (<ProgressRing>, <TodoCard>, <ToolCard>) and utility classes, we keep the code DRY. All interactive elements (buttons/links) include accessible labels (aria-label or inner text) and focus states (Tailwind adds focus:outline-none or you can style focus:ring). The transitions (transition-transform, transition-width, etc.) make the animations smooth and hardware-accelerated. These changes fulfill the new design requirements while maintaining responsive, accessible UI.

Sources: We used Tailwind utilities for animations and layout (e.g. animate-spin, transition-all) ￼ ￼, and ARIA guidelines for progress indicators ￼ ￼. The stroke-dashoffset technique for circular progress is standard SVG/CSS (see CSS-Tricks ￼ and StackOverflow ￼ for the formula). These references guided the implementation above.